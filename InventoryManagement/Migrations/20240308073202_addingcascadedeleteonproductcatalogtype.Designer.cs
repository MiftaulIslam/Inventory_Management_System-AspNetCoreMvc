// <auto-generated />
using System;
using InventoryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryManagement.Migrations
{
    [DbContext(typeof(InventoryManagementContext))]
    [Migration("20240308073202_addingcascadedeleteonproductcatalogtype")]
    partial class addingcascadedeleteonproductcatalogtype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventoryManagement.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("InventoryManagement.Models.AccountDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DepositDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountDeposit");
                });

            modelBuilder.Entity("InventoryManagement.Models.AccountWithdraw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WithdrawAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("WithdrawDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountWithdraw");
                });

            modelBuilder.Entity("InventoryManagement.Models.AdminMoneyCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CollectionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.ToTable("AdminMoneyCollection");
                });

            modelBuilder.Entity("InventoryManagement.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccountTransactionCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DueLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("PurchaseAdjustedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("InventoryManagement.Models.CustomerPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhone");
                });

            modelBuilder.Entity("InventoryManagement.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("InventoryManagement.Models.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategory");
                });

            modelBuilder.Entity("InventoryManagement.Models.ExpenseTransportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalExpense")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VoucherNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("ExpenseTransportation");
                });

            modelBuilder.Entity("InventoryManagement.Models.ExpenseTransportationList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExpenseFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpenseTransportationId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPerson")
                        .HasColumnType("int");

                    b.Property<string>("Vehicle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTransportationId");

                    b.ToTable("ExpenseTransportationList");
                });

            modelBuilder.Entity("InventoryManagement.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Capital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultAccountId")
                        .HasColumnType("int");

                    b.Property<string>("DialogTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Established")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("InstitutionLogo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoucherCountdown")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAccountId")
                        .IsUnique()
                        .HasFilter("[DefaultAccountId] IS NOT NULL");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("InventoryManagement.Models.PageLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sn")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkCategoryId");

                    b.ToTable("PageLink");
                });

            modelBuilder.Entity("InventoryManagement.Models.PageLinkAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PageLinkAssign");
                });

            modelBuilder.Entity("InventoryManagement.Models.PageLinkCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PageLinkCategory");
                });

            modelBuilder.Entity("InventoryManagement.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Warranty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCatalogId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogLevel")
                        .HasColumnType("int");

                    b.Property<string>("CatalogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CatalogTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemCount")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCatalog");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductCatalogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CatalogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductCatalogTypes");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductDamaged", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DamagedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductStockId")
                        .IsUnique();

                    b.ToTable("ProductDamaged");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int?>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductStockId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SellingId");

                    b.ToTable("ProductLog");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseListId")
                        .HasColumnType("int");

                    b.Property<int?>("SellingListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseListId");

                    b.HasIndex("SellingListId");

                    b.ToTable("ProductStock");
                });

            modelBuilder.Entity("InventoryManagement.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemoNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchaseDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PurchaseDiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PurchaseDueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PurchasePaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PurchasePaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchaseReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseSn")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchaseTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VendorId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchaseList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Warranty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseList");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchasePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiptSn")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchasePayment");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchasePaymentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchasePaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchasePaymentId");

                    b.ToTable("PurchasePaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchasePaymentReturnRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NetReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrevReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PurchasePaymentReturnRecord");
                });

            modelBuilder.Entity("InventoryManagement.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Validation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.Selling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccountTransactionCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BuyingTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpenseTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrandProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PromisedPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchaseAdjustedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PurchaseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingAccountCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SellingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SellingDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingDiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingDueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingNetProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellingPaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SellingProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SellingSn")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceChargeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServiceCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceProfit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PurchaseId")
                        .IsUnique()
                        .HasFilter("[PurchaseId] IS NOT NULL");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdjustmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductStockId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingAdjustment");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Expense")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExpenseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingExpense");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Warranty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingList");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccountCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AccountCostPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("AccountTransactionCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiptSn")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("SellingPayment");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPaymentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccountTransactionCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SellingPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellingId");

                    b.HasIndex("SellingPaymentId");

                    b.ToTable("SellingPaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPaymentReturnRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NetReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrevReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingPaymentReturnRecord");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPromiseDateMiss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MissDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingPromiseDateMiss");
                });

            modelBuilder.Entity("InventoryManagement.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ServiceDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceDiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceDueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServicePaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServicePaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceSn")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("InventoryManagement.Models.ServiceDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductCatalogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductCatalogId");

                    b.ToTable("ServiceDevice");
                });

            modelBuilder.Entity("InventoryManagement.Models.ServiceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceDeviceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceList");
                });

            modelBuilder.Entity("InventoryManagement.Models.ServicePaymentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SellingPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServicePaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SellingPaymentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Due")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VendorAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("InventoryManagement.Models.Warranty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcceptanceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChangedProductCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("ChangedProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangedProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("ProductCatalogId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<int>("WarrantySn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCatalogId");

                    b.HasIndex("ProductStockId");

                    b.HasIndex("SellingId");

                    b.ToTable("Warranty");
                });

            modelBuilder.Entity("InventoryManagement.Models.AccountDeposit", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("AccountDeposit")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InventoryManagement.Models.AccountWithdraw", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("AccountWithdraw")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InventoryManagement.Models.AdminMoneyCollection", b =>
                {
                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("AdminMoneyCollection")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.CustomerPhone", b =>
                {
                    b.HasOne("InventoryManagement.Models.Customer", "Customer")
                        .WithMany("CustomerPhone")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InventoryManagement.Models.Expense", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("Expense")
                        .HasForeignKey("AccountId");

                    b.HasOne("InventoryManagement.Models.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expense")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("Expense")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ExpenseCategory");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.ExpenseTransportation", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("ExpenseTransportation")
                        .HasForeignKey("AccountId");

                    b.HasOne("InventoryManagement.Models.Customer", "Customer")
                        .WithMany("ExpenseTransportation")
                        .HasForeignKey("CustomerId");

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("ExpenseTransportation")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Customer");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.ExpenseTransportationList", b =>
                {
                    b.HasOne("InventoryManagement.Models.ExpenseTransportation", "ExpenseTransportation")
                        .WithMany("ExpenseTransportationList")
                        .HasForeignKey("ExpenseTransportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseTransportation");
                });

            modelBuilder.Entity("InventoryManagement.Models.Institution", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithOne("Institution")
                        .HasForeignKey("InventoryManagement.Models.Institution", "DefaultAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InventoryManagement.Models.PageLink", b =>
                {
                    b.HasOne("InventoryManagement.Models.PageLinkCategory", "LinkCategory")
                        .WithMany("PageLink")
                        .HasForeignKey("LinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkCategory");
                });

            modelBuilder.Entity("InventoryManagement.Models.PageLinkAssign", b =>
                {
                    b.HasOne("InventoryManagement.Models.PageLink", "Link")
                        .WithMany("PageLinkAssign")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("PageLinkAssign")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.Product", b =>
                {
                    b.HasOne("InventoryManagement.Models.ProductCatalog", "ProductCatalog")
                        .WithMany("Product")
                        .HasForeignKey("ProductCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCatalog");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductCatalog", b =>
                {
                    b.HasOne("InventoryManagement.Models.ProductCatalogType", "CatalogType")
                        .WithMany("ProductCatalog")
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InventoryManagement.Models.ProductCatalog", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.Navigation("CatalogType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductDamaged", b =>
                {
                    b.HasOne("InventoryManagement.Models.ProductStock", "ProductStock")
                        .WithOne("ProductDamaged")
                        .HasForeignKey("InventoryManagement.Models.ProductDamaged", "ProductStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductStock");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductLog", b =>
                {
                    b.HasOne("InventoryManagement.Models.ProductStock", "ProductStock")
                        .WithMany("ProductLog")
                        .HasForeignKey("ProductStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Purchase", "Purchase")
                        .WithMany("ProductLog")
                        .HasForeignKey("PurchaseId");

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("ProductLog")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Selling", "Selling")
                        .WithMany("ProductLog")
                        .HasForeignKey("SellingId");

                    b.Navigation("ProductStock");

                    b.Navigation("Purchase");

                    b.Navigation("Registration");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductStock", b =>
                {
                    b.HasOne("InventoryManagement.Models.Product", "Product")
                        .WithMany("ProductStock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.PurchaseList", "PurchaseList")
                        .WithMany("ProductStock")
                        .HasForeignKey("PurchaseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.SellingList", "SellingList")
                        .WithMany("ProductStock")
                        .HasForeignKey("SellingListId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseList");

                    b.Navigation("SellingList");
                });

            modelBuilder.Entity("InventoryManagement.Models.Purchase", b =>
                {
                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("Purchase")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Vendor", "Vendor")
                        .WithMany("Purchase")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchaseList", b =>
                {
                    b.HasOne("InventoryManagement.Models.Product", "Product")
                        .WithMany("PurchaseList")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Purchase", "Purchase")
                        .WithMany("PurchaseList")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchasePayment", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("PurchasePayment")
                        .HasForeignKey("AccountId");

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("PurchasePayment")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Vendor", "Vendor")
                        .WithMany("PurchasePayment")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Registration");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchasePaymentList", b =>
                {
                    b.HasOne("InventoryManagement.Models.Purchase", "Purchase")
                        .WithMany("PurchasePaymentList")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.PurchasePayment", "PurchasePayment")
                        .WithMany("PurchasePaymentList")
                        .HasForeignKey("PurchasePaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("PurchasePayment");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchasePaymentReturnRecord", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("PurchasePaymentReturnRecord")
                        .HasForeignKey("AccountId");

                    b.HasOne("InventoryManagement.Models.Purchase", "Purchase")
                        .WithMany("PurchasePaymentReturnRecord")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("PurchasePaymentReturnRecord")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Purchase");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.Selling", b =>
                {
                    b.HasOne("InventoryManagement.Models.Customer", "Customer")
                        .WithMany("Selling")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Purchase", "Purchase")
                        .WithOne("Selling")
                        .HasForeignKey("InventoryManagement.Models.Selling", "PurchaseId");

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("Selling")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Purchase");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingAdjustment", b =>
                {
                    b.HasOne("InventoryManagement.Models.Product", "Product")
                        .WithMany("SellingAdjustment")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.ProductStock", "ProductStock")
                        .WithMany("SellingAdjustment")
                        .HasForeignKey("ProductStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("SellingAdjustment")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Selling", "Selling")
                        .WithMany("SellingAdjustment")
                        .HasForeignKey("SellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductStock");

                    b.Navigation("Registration");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingExpense", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("SellingExpense")
                        .HasForeignKey("AccountId");

                    b.HasOne("InventoryManagement.Models.Selling", "Selling")
                        .WithMany("SellingExpense")
                        .HasForeignKey("SellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingList", b =>
                {
                    b.HasOne("InventoryManagement.Models.Product", "Product")
                        .WithMany("SellingList")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Selling", "Selling")
                        .WithMany("SellingList")
                        .HasForeignKey("SellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPayment", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("SellingPayment")
                        .HasForeignKey("AccountId");

                    b.HasOne("InventoryManagement.Models.Customer", "Customer")
                        .WithMany("SellingPayment")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("SellingPayment")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Customer");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPaymentList", b =>
                {
                    b.HasOne("InventoryManagement.Models.Selling", "Selling")
                        .WithMany("SellingPaymentList")
                        .HasForeignKey("SellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.SellingPayment", "SellingPayment")
                        .WithMany("SellingPaymentList")
                        .HasForeignKey("SellingPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Selling");

                    b.Navigation("SellingPayment");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPaymentReturnRecord", b =>
                {
                    b.HasOne("InventoryManagement.Models.Account", "Account")
                        .WithMany("SellingPaymentReturnRecord")
                        .HasForeignKey("AccountId");

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("SellingPaymentReturnRecord")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Selling", "Selling")
                        .WithMany("SellingPaymentReturnRecord")
                        .HasForeignKey("SellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Registration");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPromiseDateMiss", b =>
                {
                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("SellingPromiseDateMisses")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Selling", "Selling")
                        .WithMany("SellingPromiseDateMisses")
                        .HasForeignKey("SellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Models.Service", b =>
                {
                    b.HasOne("InventoryManagement.Models.Customer", "Customer")
                        .WithMany("Service")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Registration", "Registration")
                        .WithMany("Service")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("InventoryManagement.Models.ServiceDevice", b =>
                {
                    b.HasOne("InventoryManagement.Models.Customer", "Customer")
                        .WithMany("ServiceDevice")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.ProductCatalog", "ProductCatalog")
                        .WithMany("ServiceDevice")
                        .HasForeignKey("ProductCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ProductCatalog");
                });

            modelBuilder.Entity("InventoryManagement.Models.ServiceList", b =>
                {
                    b.HasOne("InventoryManagement.Models.ServiceDevice", "ServiceDevice")
                        .WithMany("ServiceList")
                        .HasForeignKey("ServiceDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Service", "Service")
                        .WithMany("ServiceList")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServiceDevice");
                });

            modelBuilder.Entity("InventoryManagement.Models.ServicePaymentList", b =>
                {
                    b.HasOne("InventoryManagement.Models.SellingPayment", "SellingPayment")
                        .WithMany("ServicePaymentList")
                        .HasForeignKey("SellingPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Service", "Service")
                        .WithMany("ServicePaymentList")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellingPayment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("InventoryManagement.Models.Warranty", b =>
                {
                    b.HasOne("InventoryManagement.Models.ProductCatalog", "ProductCatalog")
                        .WithMany("Warranty")
                        .HasForeignKey("ProductCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.ProductStock", "ProductStock")
                        .WithMany("Warranty")
                        .HasForeignKey("ProductStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Models.Selling", "Selling")
                        .WithMany("Warranty")
                        .HasForeignKey("SellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCatalog");

                    b.Navigation("ProductStock");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Models.Account", b =>
                {
                    b.Navigation("AccountDeposit");

                    b.Navigation("AccountWithdraw");

                    b.Navigation("Expense");

                    b.Navigation("ExpenseTransportation");

                    b.Navigation("Institution")
                        .IsRequired();

                    b.Navigation("PurchasePayment");

                    b.Navigation("PurchasePaymentReturnRecord");

                    b.Navigation("SellingExpense");

                    b.Navigation("SellingPayment");

                    b.Navigation("SellingPaymentReturnRecord");
                });

            modelBuilder.Entity("InventoryManagement.Models.Customer", b =>
                {
                    b.Navigation("CustomerPhone");

                    b.Navigation("ExpenseTransportation");

                    b.Navigation("Selling");

                    b.Navigation("SellingPayment");

                    b.Navigation("Service");

                    b.Navigation("ServiceDevice");
                });

            modelBuilder.Entity("InventoryManagement.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expense");
                });

            modelBuilder.Entity("InventoryManagement.Models.ExpenseTransportation", b =>
                {
                    b.Navigation("ExpenseTransportationList");
                });

            modelBuilder.Entity("InventoryManagement.Models.PageLink", b =>
                {
                    b.Navigation("PageLinkAssign");
                });

            modelBuilder.Entity("InventoryManagement.Models.PageLinkCategory", b =>
                {
                    b.Navigation("PageLink");
                });

            modelBuilder.Entity("InventoryManagement.Models.Product", b =>
                {
                    b.Navigation("ProductStock");

                    b.Navigation("PurchaseList");

                    b.Navigation("SellingAdjustment");

                    b.Navigation("SellingList");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductCatalog", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Product");

                    b.Navigation("ServiceDevice");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductCatalogType", b =>
                {
                    b.Navigation("ProductCatalog");
                });

            modelBuilder.Entity("InventoryManagement.Models.ProductStock", b =>
                {
                    b.Navigation("ProductDamaged")
                        .IsRequired();

                    b.Navigation("ProductLog");

                    b.Navigation("SellingAdjustment");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("InventoryManagement.Models.Purchase", b =>
                {
                    b.Navigation("ProductLog");

                    b.Navigation("PurchaseList");

                    b.Navigation("PurchasePaymentList");

                    b.Navigation("PurchasePaymentReturnRecord");

                    b.Navigation("Selling")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchaseList", b =>
                {
                    b.Navigation("ProductStock");
                });

            modelBuilder.Entity("InventoryManagement.Models.PurchasePayment", b =>
                {
                    b.Navigation("PurchasePaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Models.Registration", b =>
                {
                    b.Navigation("AdminMoneyCollection");

                    b.Navigation("Expense");

                    b.Navigation("ExpenseTransportation");

                    b.Navigation("PageLinkAssign");

                    b.Navigation("ProductLog");

                    b.Navigation("Purchase");

                    b.Navigation("PurchasePayment");

                    b.Navigation("PurchasePaymentReturnRecord");

                    b.Navigation("Selling");

                    b.Navigation("SellingAdjustment");

                    b.Navigation("SellingPayment");

                    b.Navigation("SellingPaymentReturnRecord");

                    b.Navigation("SellingPromiseDateMisses");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("InventoryManagement.Models.Selling", b =>
                {
                    b.Navigation("ProductLog");

                    b.Navigation("SellingAdjustment");

                    b.Navigation("SellingExpense");

                    b.Navigation("SellingList");

                    b.Navigation("SellingPaymentList");

                    b.Navigation("SellingPaymentReturnRecord");

                    b.Navigation("SellingPromiseDateMisses");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingList", b =>
                {
                    b.Navigation("ProductStock");
                });

            modelBuilder.Entity("InventoryManagement.Models.SellingPayment", b =>
                {
                    b.Navigation("SellingPaymentList");

                    b.Navigation("ServicePaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Models.Service", b =>
                {
                    b.Navigation("ServiceList");

                    b.Navigation("ServicePaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Models.ServiceDevice", b =>
                {
                    b.Navigation("ServiceList");
                });

            modelBuilder.Entity("InventoryManagement.Models.Vendor", b =>
                {
                    b.Navigation("Purchase");

                    b.Navigation("PurchasePayment");
                });
#pragma warning restore 612, 618
        }
    }
}
